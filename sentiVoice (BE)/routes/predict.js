// Enhanced predict endpoint with automatic report generation
router.post('/predict', upload.single('audio'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ 
        status: "error", 
        message: "No audio file uploaded",
        reportSent: false 
      });
    }

    const audioPath = req.file.path;
    const patientUsername = req.body.patientUsername;
    const therapistUsername = req.body.therapistUsername;
    const patientName = req.body.patientName;

    try {
      // Get emotion prediction from Flask
      const flaskResponse = await axios.post(
        'http://localhost:5000/api/predict',
        { file_path: audioPath },
        { headers: { 'Content-Type': 'application/json' } }
      );
      
      // Clean up - delete the uploaded file after getting response
      fs.unlinkSync(audioPath);

      const analysisResult = flaskResponse.data;
      let reportSent = false;
      let reportId = null;

      // If user information is provided, automatically send report
      if (patientUsername && therapistUsername && patientName) {
        try {

          
          // Create report data
          const reportData = {
            patientUsername,
            therapistUsername,
            patientName,
            emotion: analysisResult.emotion,
            analysisData: {
              ...analysisResult,
              analysisDate: new Date().toLocaleDateString(),
              analysisTime: new Date().toLocaleTimeString()
            }
          };

          // Generate PDF
          const fileName = `${patientName.replace(/\s+/g, '_')}_Voice_Analysis_${new Date().toISOString().split('T')[0]}.pdf`;
          const pdfData = await generatePdfReport(reportData.analysisData, patientName);

          // Create and save report
          const newReport = new Report({
            ...reportData,
            fileName,
            pdfData,
            reportType: 'voice_analysis',
            isAutoGenerated: true
          });

          await newReport.save();
          
          // Send notification to therapist
          await Notification.create({
            recipientUsername: therapistUsername,
            title: 'New Voice Analysis Report',
            message: `${patientName} completed voice analysis (Emotion: ${analysisResult.emotion}). Report sent automatically.`,
            type: 'voice_analysis',
            isRead: false,
            timestamp: new Date()
          });

          reportSent = true;
          reportId = newReport._id;

        } catch (error) {
          if (process.env.NODE_ENV === 'development') {
            console.error('Failed to auto-send report:', error.message);
          }
          reportSent = false;
        }
      }

      // Return enhanced response
      res.json({
        status: "success",
        data: analysisResult,
        reportSent,
        reportId,
        message: reportSent 
          ? `Audio processed and report sent to Dr. ${therapistUsername}` 
          : "Audio processed successfully"
      });
      
    } catch (flaskError) {
      console.error('Error from Flask:', flaskError.response?.data || flaskError.message);
      return res.status(500).json({ 
        status: "error",
        message: "Failed to process audio in Flask",
        reportSent: false 
      });
    }
  } catch (error) {
    console.error('Error processing audio:', error);
    return res.status(500).json({ 
      status: "error",
      message: "Failed to process audio file",
      reportSent: false 
    });
  }
});
