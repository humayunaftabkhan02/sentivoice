const Report = require('../models/reportModel');
const Notification = require('../models/notificationModel');

// POST /api/reports/send-audio-analysis
exports.sendVoiceAnalysisReport = async (req) => {
    try {
        console.log('sendVoiceAnalysisReport called with:', {
            patientUsername: req.body.patientUsername,
            therapistUsername: req.body.therapistUsername,
            patientName: req.body.patientName,
            emotion: req.body.emotion,
            hasAnalysisData: !!req.body.analysisData,
            hasPdfData: !!req.body.pdfData,
            fileName: req.body.fileName
        });
        
        const { 
            patientUsername, 
            therapistUsername, 
            patientName, 
            emotion, 
            analysisData, 
            pdfData, 
            fileName 
        } = req.body;
        
        console.log('Creating new report with data:', {
            patientUsername,
            therapistUsername,
            patientName,
            emotion,
            fileName
        });
        
        const newReport = new Report({
            patientUsername,
            therapistUsername,
            patientName,
            reportType: 'voice_analysis',
            emotion,
            analysisData,
            fileName,
            pdfData,
            isAutoGenerated: true
        });
        const savedReport = await newReport.save();
        console.log('Report saved with ID:', savedReport._id);

        
        // Send notification to therapist
        await Notification.create({
            recipientUsername: therapistUsername,
            title: 'New Voice Analysis Report',
            message: `${patientName} completed voice analysis (Emotion: ${emotion}). Report sent automatically.`,
            type: 'voice_analysis',
            isRead: false
        });

        console.log('Notification created for therapist:', therapistUsername);
        
        return { reportId: savedReport._id };
    } catch (error) {
          console.error('Error sending voice analysis report:', error.message);
        console.error('Error stack:', error.stack);
        throw error;
    }
};

// GET /api/reports/therapist/:therapistUsername
exports.getTherapistReports = async (req, res) => {
    try {
        const { therapistUsername } = req.params;
        
        console.log('Fetching reports for therapist:', therapistUsername);
        console.log('Request user:', req.user);
        console.log('Request headers:', req.headers);
        
        const reports = await Report.find({ therapistUsername })
            .select('-pdfData') // Don't send PDF data in list (too large)
            .sort({ sentAt: -1 });
        
        console.log('Found reports:', reports.length);
        console.log('Reports:', reports);
        
        res.json({ 
            success: true, 
            reports: reports || []
        });
    } catch (error) {
        if (process.env.NODE_ENV === 'development') {
          console.error('Error fetching reports:', error.message);
        }
        res.status(500).json({ 
            success: false, 
            message: 'Failed to fetch reports' 
        });
    }
};

// POST /api/reports/send
exports.sendReport = async (req, res) => {
    try {
        const { 
            patientUsername, 
            therapistUsername, 
            patientName, 
            message, 
            pdfData, 
            fileName 
        } = req.body;
        
        console.log('Sending report:', {
            patientUsername,
            therapistUsername,
            patientName,
            message: message ? 'Message provided' : 'No message',
            fileName
        });
        
        const newReport = new Report({
            patientUsername,
            therapistUsername,
            patientName,
            message,
            fileName,
            pdfData
        });
        
        await newReport.save();
        console.log('Report saved with ID:', newReport._id);

        // Create notification for therapist
        await new Notification({
            recipientUsername: therapistUsername,
            message: `New patient report from ${patientName}`,
            type: 'report',
            referenceId: newReport._id
        }).save();
        
        console.log('Notification created for therapist:', therapistUsername);
        
        res.json({ 
            success: true, 
            message: 'Report sent successfully', 
            reportId: newReport._id 
        });
        } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('Error sending report:', error.message);
      }
        res.status(500).json({ 
            success: false, 
            message: 'Failed to send report' 
        });
    }
};



// GET /api/reports/download/:reportId
exports.downloadReport = async (req, res) => {
    try {
        const { reportId } = req.params;

        
        const report = await Report.findById(reportId);
        if (!report) {
    
            return res.status(404).json({ message: 'Report not found' });
        }
        

        
        // Convert base64 to buffer
        const pdfBuffer = Buffer.from(report.pdfData, 'base64');
        
        res.set({
            'Content-Type': 'application/pdf',
            'Content-Disposition': `attachment; filename="${report.fileName}"`,
            'Content-Length': pdfBuffer.length
        });
        
        // Mark report as read
        report.isRead = true;
        await report.save();

        
        res.send(pdfBuffer);
    } catch (error) {
        if (process.env.NODE_ENV === 'development') {
          console.error('Error downloading report:', error.message);
        }
        res.status(500).json({ message: 'Failed to download report' });
    }
};