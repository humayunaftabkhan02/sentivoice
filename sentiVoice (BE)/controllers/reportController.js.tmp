const Report = require('../models/reportModel');
const Notification = require('../models/notificationModel');

// Send voice analysis report endpoint (AUTOMATIC)
exports.sendVoiceAnalysisReport = async (req, res) => {
  try {
    console.log('üìß Received voice analysis report request');
    
    const { 
      patientUsername, 
      therapistUsername, 
      patientName, 
      emotion, 
      analysisData, 
      pdfData, 
      fileName 
    } = req.body;
    
    const newReport = new Report({
      patientUsername,
      therapistUsername,
      patientName,
      reportType: 'voice_analysis',
      emotion,
      analysisData,
      fileName,
      pdfData,
      isAutoGenerated: true
    });
    
    await newReport.save();
    console.log(`‚úÖ Report saved for Dr. ${therapistUsername}`);
    
    // Send notification
    await Notification.create({
      recipientUsername: therapistUsername,
      title: 'New Voice Analysis Report',
      message: `${patientName} completed voice analysis (Emotion: ${emotion}). Report sent automatically.`,
      type: 'voice_analysis',
      isRead: false,
      timestamp: new Date()
    });
    
    console.log('‚úÖ Notification sent successfully');
    
    res.json({ 
      success: true, 
      message: 'Voice analysis report sent automatically', 
      reportId: newReport._id 
    });
  } catch (error) {
    console.error('‚ùå Error sending voice analysis report:', error);
    res.status(500).json({ success: false, message: 'Failed to send report' });
  }
};

// Get therapist reports
exports.getTherapistReports = async (req, res) => {
  try {
    const { therapistUsername } = req.params;
    console.log(`üîç Fetching reports for Dr. ${therapistUsername}`);
    
    const reports = await Report.find({ therapistUsername })
      .select('-pdfData') // Don't send PDF data in list
      .sort({ sentAt: -1 });
    
    console.log(`üìã Found ${reports.length} reports`);
    
    res.json({ success: true, reports });
  } catch (error) {
    console.error('‚ùå Error fetching reports:', error);
    res.status(500).json({ success: false, message: 'Failed to fetch reports' });
  }
};

// Download specific report
exports.downloadReport = async (req, res) => {
  try {
    const { reportId } = req.params;
    console.log(`üì• Downloading report: ${reportId}`);
    
    const report = await Report.findById(reportId);
    if (!report) {
      console.log('‚ùå Report not found');
      return res.status(404).json({ message: 'Report not found' });
    }
    
    // Convert base64 to buffer
    const pdfBuffer = Buffer.from(report.pdfData, 'base64');
    
    res.set({
      'Content-Type': 'application/pdf',
      'Content-Disposition': `attachment; filename="${report.fileName}"`,
      'Content-Length': pdfBuffer.length
    });
    
    // Mark as read
    report.isRead = true;
    await report.save();
    console.log('‚úÖ Report marked as read');
    
    res.send(pdfBuffer);
  } catch (error) {
    console.error('‚ùå Error downloading report:', error);
    res.status(500).json({ message: 'Failed to download report' });
  }
};
